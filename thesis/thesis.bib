@misc{bonn_2018,
  author       = {Paolo Capriotti, Ambrus Kaposi, Nicolai Kraus},
  title        = {Towards higher models and syntax of type theory},
  howpublished = {\url{https://people.cs.nott.ac.uk/psztxa/talks/bonn18.pdf\#page=10}},
  year         = {2018},
  month        = {06},
  note         = {[Accessed: November 19, 2024]}
}

@misc{biinv-agda,
  author = {Felix Cherubini, Anders Mörtberg},
  title = {A standard library for Cubical Agda, Bi-invertible integers},
  howpublished = {\url{https://github.com/agda/cubical/blob/master/Cubical/Data/Int/MoreInts/BiInvInt/Base.agda}},
  year = {2024},
  note = {[Accessed: November 19, 2024]}
}

@misc{div-nat,
  author = {Matthew Daggitt},
  title = {The Agda standard library, Built-in natural numbers},
  howpublished = {\url{https://github.com/agda/agda-stdlib/blob/master/src/Data/Nat/Base.agda}},
  year = {2024},
  note = {[Accessed: November 27, 2024]}
}

@inproceedings{10.1145/3373718.3394760,
  author = {Altenkirch, Thorsten and Scoccola, Luis},
  title = {The Integers as a Higher Inductive Type},
  year = {2020},
  isbn = {9781450371049},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3373718.3394760},
  doi = {10.1145/3373718.3394760},
  abstract = {We consider the problem of defining the integers in Homotopy Type Theory (HoTT). We can define the type of integers as signed natural numbers (i.e., using a coproduct), but its induction principle is very inconvenient to work with, since it leads to an explosion of cases. An alternative is to use set-quotients, but here we need to use set-truncation to avoid non-trivial higher equalities. This results in a recursion principle that only allows us to define function into sets (types satisfying UIP). In this paper we consider higher inductive types using either a small universe or bi-invertible maps. These types represent integers without explicit set-truncation that are equivalent to the usual coproduct representation. This is an interesting example since it shows how some coherence problems can be handled in HoTT. We discuss some open questions triggered by this work. The proofs have been formally verified using cubical Agda.},
  booktitle = {Proceedings of the 35th Annual ACM/IEEE Symposium on Logic in Computer Science},
  pages = {67–73},
  numpages = {7},
  keywords = {truncation, initiality, higher inductive type, coherence problem},
  location = {Saarbr\"{u}cken, Germany},
  series = {LICS '20}
}

@article{10.1145/3341691,
author = {Vezzosi, Andrea and M\"{o}rtberg, Anders and Abel, Andreas},
title = {Cubical agda: a dependently typed programming language with univalence and higher inductive types},
year = {2019},
issue_date = {August 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {ICFP},
url = {https://doi.org/10.1145/3341691},
doi = {10.1145/3341691},
abstract = {Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.},
journal = {Proc. ACM Program. Lang.},
month = jul,
articleno = {87},
numpages = {29},
keywords = {Univalence, Higher Inductive Types, Dependent Pattern Matching, Cubical Type Theory}
}

@misc{cohen2016cubicaltypetheoryconstructive,
      title={Cubical Type Theory: a constructive interpretation of the univalence axiom},
      author={Cyril Cohen and Thierry Coquand and Simon Huber and Anders Mörtberg},
      year={2016},
      eprint={1611.02108},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/1611.02108},
}

@misc{coquand2018higherinductivetypescubical,
      title={On Higher Inductive Types in Cubical Type Theory},
      author={Thierry Coquand and Simon Huber and Anders Mörtberg},
      year={2018},
      eprint={1802.01170},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/1802.01170},
}

@misc{doré2024automatingboundaryfillingcubical,
      title={Automating Boundary Filling in Cubical Agda},
      author={Maximilian Doré and Evan Cavallo and Anders Mörtberg},
      year={2024},
      eprint={2402.12169},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/2402.12169},
}

@Book{hottbook,
  author =    {The {Univalent Foundations Program}},
  title =     {Homotopy Type Theory: Univalent Foundations of Mathematics},
  publisher = {\url{https://homotopytypetheory.org/book}},
  address =   {Institute for Advanced Study},
  year =      2013}

@Book{peano,
  author =    {Giuseppe Peano},
  title =     {Arithmetices principia, nova methodo exposita},
  publisher = {Fratres Bocca},
  year =      1889}
